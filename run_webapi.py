
# ----------

from fastapi import FastAPI, HTTPException
from starlette.responses import Response
import uvicorn
import multiprocessing
from oneringcore import OneRingCore

import asyncio

app = FastAPI()

version = "1.0"

core:OneRingCore = None

@app.on_event("startup")
async def startup_event():
    global core
    core = OneRingCore()
    core.init_with_plugins()
    pass

@app.get(
    "/translate",

    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    # responses = {
    #     200: {
    #         "content": {"text": {}}
    #     }
    # },

    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    # response_class=Response
)
async def translate(text:str, from_lang:str = "", to_lang:str = "", translator_plugin:str = "", add_params:str = "", api_key:str = ""):
    """
       Return translation

       :param str text: text to translate

       :param str from_lang: from language (2 symbols, like "en")

       :param str to_lang: to language (2 symbols, like "en")

       :param str translator_plugin: to use. If blank, default will be used. If not inited plugin will call, core try to init plugin

       :param str add_params: additional params for translation (depends on plugin)

       :param int api_key: api key for access (if service setup in security mode with api keys)

       :return: dict (result: text)
       """


    #return Response(content=data, media_type="text/wav")
    if len(core.api_keys_allowed) > 0: # there are some api keys
        if api_key == "":
            return {"error": "API key required"}
        if not (api_key in core.api_keys_allowed):
            return {"error": "No valid API key provided"}

    if translator_plugin != "":
        core.init_translator_engine(translator_plugin)

        if translator_plugin not in core.inited_translator_engines:
            return {"error": "Translator plugin not inited"}

    if core.is_debug_input_output:
        print("Input: {0}".format(text))

    if translator_plugin == "":
        translator_plugin = core.default_translator

    if from_lang == "":
        from_lang = core.default_from_lang

    if to_lang == "":
        to_lang = core.default_to_lang

    if core.is_multithread:
        #print("Multithread")
        res = await asyncio.to_thread(core.translators[translator_plugin][1], core, text, from_lang, to_lang, add_params)
    else:
        res = core.translators[translator_plugin][1](core,text,from_lang,to_lang,add_params)


    if core.is_debug_input_output:
        print("Output: {0}".format(res))

    return {"result": res}

@app.get(
    "/translator_plugin_info",
)
async def translator_plugin_info(api_key:str = ""):
    """
       Return list of available translator plugins

       :param int api_key: api key for access (if service setup in security mode with api keys)

       :return: dict with info
       """
    if len(core.api_keys_allowed) > 0: # there are some api keys
        if api_key == "":
            return {"error": "API key required"}
        if not (api_key in core.api_keys_allowed):
            return {"error": "No valid API key provided"}

    full_list = list(core.translators.keys())
    inited_list = core.inited_translator_engines
    return {"result": {
        "default": core.default_translator,
        "all_translator": full_list,
        "inited_translator": inited_list
    }}

if __name__ == "__main__":
    #multiprocessing.freeze_support()
    print("Running OneRingTranslator server v{0}...".format(version))
    uvicorn.run("run_webapi:app", host="127.0.0.1", port=4990, log_level="info")